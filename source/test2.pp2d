{"assets":{"script":[{"Game":{"type":"game script","start":"n = Player()","loop":""}},{"Player":{"type":"object script","start":"#initialise pos, sprite\nself.x = 0\nself.y = 0\nself.sprite = new_sprite(\"texture0.png\")\n\n#velocity values\nself.xv = 0\nself.yv = 0\nself.boostx, self.boosty = 0, 0\n\n#tail\nself.mid = segm(0, 0, 0.8, 7)\nself.back = segm(0, 0, 0.6, 12)","loop":"\nxdist = mouse_x()-self.x\nydist = mouse_y()-self.y\n\n#prevent 0 trig errors\nif not xdist and not ydist:\n    xdist = 1\n\n#get hypotenuse\nmagn = hyp(xdist, ydist)\n#get adjusted values for hypotenuse of length 1\nxdist, ydist = xdist/magn, ydist/magn\n\n#move\nif key_is_pressed(\"c\"):\n    #increase velocity\n    self.xv += (xdist*0.9)\n    self.yv += (ydist*0.9)\n    #get total velocity magnetude\n    Vhyp = hyp(self.xv, self.yv)\n    #correct velocity speed\n    if Vhyp > 6.5:\n        self.xv = (self.xv/Vhyp)*6.5\n        self.yv = (self.yv/Vhyp)*6.5\n\nelse:\n    #water deteriorate velocity\n    self.xv = deter(self.xv, 0.95)\n    self.yv = deter(self.yv, 0.95)\n    \n#dash\nif key_was_pressed(\"x\"):\n    self.boostx = xdist*13\n    self.boosty = ydist*13\n\n#deteriorate boost velocity\nself.boostx, self.boosty = deter(self.boostx, 0.94), deter(self.boosty, 0.94)\na, b = (self.xv+self.boostx), (self.yv+self.boosty)\nself.x += a\nself.y += b\nif a or b:\n    self.mid.update(self.x, self.y)\n    self.back.update(self.x, self.y)"}},{"Pfollower":{"type":"object script","start":"self.sprite = new_sprite(\"texture0.png\")\n\n","loop":"#Pfollower loop\n\n"}}],"room":[],"texture":[{"texture0.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19216.225456.1615531947.texture0.png"}}],"sound":[],"function":[{"imports.py":{"type":"function script","head":"#File for imports to run before everything\nimport math\nfrom collections import deque\n"}},{"quickfuncs.py":{"type":"function script","head":"#A collection of helper functions/enums.\n\ndegconv = math.pi/180;\n\n\ndef hyp(s, c) -> int:\n    \"\"\"Returns hypotenuse of right angle triangle.\"\"\"\n    return math.sqrt((s**2)+(c**2))\n\ndef deter(val, k) -> int:\n    \"\"\"Helper function that allows for movement deterioration\n    while preventing rounding errors.\"\"\"\n    if val == 1: return 0\n    return round(val*k, 3)"}},{"ns_classes.py":{"type":"function script","head":"#non-significant classes\n\nclass segm():\n\n    def __init__(self, x, y, scl, delay):\n\n        self.inst = Pfollower()\n        self.inst.x = x\n        self.inst.y = y\n        self.inst.scaleX = scl\n        self.inst.scaleY = scl\n        self.inst.wrapper = self\n        self.delay = delay\n        self.updateq = []\n        self.jobn = 0\n\n    def update(self, nx, ny):\n        self.updateq.append((nx, ny))\n        self.jobn += 1\n        if self.jobn > self.delay:\n            self.jobn -= 1\n            a, b = self.updateq.pop(0)\n            self.inst.x = a\n            self.inst.y = b\n\n    "}}]}}