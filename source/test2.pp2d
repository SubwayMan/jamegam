{"assets":{"script":[{"Game":{"type":"game script","start":"self.bg = Background()\r\nself.p = Player()\r\n#set below to False to make camerabox invisible\r\nself.debug = True\r\n\r\n\r\na = CameraBox(800, 0, 800, 600, 300, 0, 2)\r\nb = CameraBox(0, 600, 800, 1000, 0, 300, 3)\r\n\r\nself.ccamX = 0\r\nself.ccamY = 0","loop":"self.ccamX = get_camera_x()\r\nself.ccamY = get_camera_y()"}},{"Player":{"type":"object script","start":"#initialise pos, sprite\nself.gameX = 0\nself.gameY = 0\n\nself.x = 0\nself.y = 0\nself.sprite = new_sprite(\"octopus.png\")\n\n#velocity values\nself.xv = 0\nself.yv = 0\nself.boostx, self.boosty = 0, 0\nself.framecount = 0\nself.scaleX = 0.7\nself.scaleY = 0.7\n\n#store the last position change for external use (camera)\nself.Dx = 0\nself.Dy = 0","loop":"xdist = (mouse_x()+get_camera_x())\nydist = (mouse_y()+get_camera_y())\n#print(mouse_x(), mouse_y())\n#print(xdist, ydist)\n#print(self.x, self.y)\nxdist -= self.x\nydist -= self.y\nx0, y0 = self.x, self.y\n\n# Prevent 0 trig errors\nif not xdist and not ydist:\n    xdist = 1\n\n# Get hypotenuse and adjust x & y for hyp of length 1\nmagn = hyp(xdist, ydist)\nxdist, ydist = xdist/magn, ydist/magn\n\n# Move\nif mouse_is_pressed('left'):\n    #increase velocity\n    self.xv += (xdist*0.9)\n    self.yv += (ydist*0.9)\n    #get total velocity magnetude\n    Vhyp = hyp(self.xv, self.yv)\n    #correct velocity speed\n    if Vhyp > 6.5: # 6.5\n        self.xv = (self.xv/Vhyp)*6.5\n        self.yv = (self.yv/Vhyp)*6.5\n\nelse:\n    #water deteriorate velocity\n    self.xv = deter(self.xv, 0.95)\n    self.yv = deter(self.yv, 0.95)\n    \n#dash\nif key_was_pressed(' ') or mouse_was_pressed('right'):\n    self.boostx = xdist*13\n    self.boosty = ydist*13\n\n#deteriorate boost velocity\nself.boostx, self.boosty = deter(self.boostx, 0.94), deter(self.boosty, 0.94)\n\n# Final movement values in x and y\na, b = (self.xv+self.boostx), (self.yv+self.boosty)\nself.x += a\nself.y += b\n\n#Rotation in direction of movement\nself.Dx, self.Dy = self.x-x0, self.y-y0\n\nif self.Dx and self.Dy:\n    Fy = self.Dy/hyp(self.Dx, self.Dy)\n    if self.Dx > 0:\n        self.angle = math.degrees(math.asin(Fy)) - 90\n    else:\n        self.angle = -1* (math.degrees(math.asin(Fy)) - 90)\n   "}},{"Background":{"type":"object script","start":"#Background start\n\nself.sprite = sprite('waterBG.png')","loop":"#Background loop\n\n"}},{"camerabox":{"type":"object script","start":"#CameraBox start\n\n","loop":"\n#Run the classes \"update\" function if colliding with player\nexid = get_collision(self, \"Player\")\nif get_collision(self, \"Player\"):\n    self.wrapper.adjust(exid)"}}],"room":[],"texture":[{"octopus.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615621603.octopus.png"}},{"waterBG.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615667719.waterBG.png"}},{"camdebug.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19216.225969.1615702848.camdebug.png"}},{"waterdebug.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19216.225969.1615703001.waterdebug.png"}}],"sound":[],"function":[{"imports.py":{"type":"function script","head":"#File for imports to run before everything\nimport math\nfrom collections import deque\n"}},{"quickfuncs.py":{"type":"function script","head":"#A collection of helper functions/enums.\n\ndegconv = math.pi/180;\n\n\ndef hyp(s, c) -> int:\n    \"\"\"Return hypotenuse of right angle triangle.\"\"\"\n    return math.sqrt((s**2)+(c**2))\n\ndef get_angle(y) -> float:\n    \"\"\"Return angle of right angle triangle.\n    \n    Assumes hypotenuse is 1\n    \"\"\"\n    return math.degrees(math.asin(y))\n\ndef deter(val, k) -> int:\n    \"\"\"Helper function that allows for movement deterioration\n    while preventing rounding errors.\"\"\"\n    if abs(val) <= 0.1: return 0\n    return round(val*k, 3)"}},{"ns_classes.py":{"type":"function script","head":"#non-significant classes\n\nclass CameraBox():\n    \"\"\"A collision box that adjusts the camera to a specification.\n    Constructor Parameters: x, y, width, height, offsetX, offsetY, pan.\n    offsetX and offsetY are used to specify the location of the player \n    in relation to the camera, and pan is the speed at which it adjusts.\"\"\"\n\n    def __init__(self, x, y, wd, ht, offX, offY, pan):\n        \n        self.inst = camerabox()\n        self.inst.x = x\n        self.inst.y = y\n        self.inst.sprite = new_sprite(\"camdebug.png\")\n        #since object size in pp2d is directly related to sprite size,\n        #note that default camera debug spr is 40x40.\n        self.inst.scaleX = (wd/40)\n        self.inst.scaleY = (ht/40)\n        self.inst.wrapper = self\n\n        self.offX = offX\n        self.offY = offY\n        self.pan = pan\n\n        if not game.debug:\n            self.inst.alpha = 0\n\n\n    def adjust(self, pl):\n        \"\"\"Function that runs every frame while object is\n        colliding. Moves the camera.\"\"\"\n        #adjust for last player movement\n        set_camera(game.ccamX + pl.Dx, game.ccamY + pl.Dy)\n\n        nx, ny = get_camera_x(), get_camera_y()\n        dFx = (pl.x + self.offX) - nx\n        dFy = (pl.y + self.offY) - ny\n        \n        if (not dFx) and (not dFy):\n            return None\n\n        Dhyp = hyp(dFx, dFy)\n        Fx = (dFx/Dhyp) * self.pan\n        Fy = (dFy/Dhyp) * self.pan\n\n        #print(Fx, dFx)\n  \n        if abs(Fx) < abs(dFx):\n            set_camera(nx + Fx, ny)\n        else:\n            set_camera(nx + dFx, ny)\n\n        if abs(Fy) < abs(dFy):\n            set_camera(get_camera_x(), ny + Fy)\n        else:\n            set_camera(get_camera_x(), ny + dFy)\n\n\n"}}]}}