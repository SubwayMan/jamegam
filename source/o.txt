{"assets":{
"script":[
{"Game":{
"type":"game script","start":"self.bg = Background()\r
self.p = Player()\r
bigwhale = Whale()\r
bigwhale.scaleX = bigwhale.scaleY = 2\r
bigwhale.gameX = bigwhale.gameY = -700\r
self.obj_loader = ObjLoader(2000, Whale(), bigwhale)","loop":""
}
},
{"Player":{
"type":"object script","start":"#initialise pos, sprite
self.gameX = 0
self.gameY = 0

self.x = 0
self.y = 0
self.sprite = new_sprite(\"octopus.png\")
self.scaleX = 0.7
self.scaleY = 0.7

#velocity values
self.xv = 0
self.yv = 0
self.boostx, self.boosty = 0, 0","loop":"xdist = mouse_x()-self.x
ydist = mouse_y()-self.y
keys = [key_is_pressed('arrowRight') or key_is_pressed('d'), 
        key_is_pressed('arrowLeft') or key_is_pressed('a'), 
        key_is_pressed('arrowUp') or key_is_pressed('w'),
        key_is_pressed('arrowDown') or key_is_pressed('s')
]
x0, y0 = self.gameX, self.gameY

# Prevent 0 trig errors
if not xdist and not ydist:
    xdist = 1

# Get hypotenuse and adjust x & y for hyp of length 1
magn = hyp(xdist, ydist)
xdist, ydist = xdist/magn, ydist/magn

def do_move():
    # Increase velocity
    self.xv += (xdist*0.9)
    self.yv += (ydist*0.9)
    
    # Get total velocity magnetude
    Vhyp = hyp(self.xv, self.yv)
    
    # Correct velocity speed
    if Vhyp > 6.5: # 6.5
        self.xv = (self.xv/Vhyp)*6.5
        self.yv = (self.yv/Vhyp)*6.5

# Move unless mouse is right on top of player
if mouse_is_pressed('left') and not magn < 25:
    do_move()

# Allow for arrow-key movement
elif any(keys):
    xdist=ydist=0
    if keys[0
]: xdist = 1
    if keys[1
]: xdist = -1
    if keys[2
]: ydist = 1
    if keys[3
]: ydist = -1
    magn = hyp(xdist, ydist)
    xdist, ydist = xdist/magn, ydist/magn

    do_move()

else:
    # \"Water resistance\" deteriorate velocity
    self.xv = deter(self.xv, 0.95)
    self.yv = deter(self.yv, 0.95)
    
# Dash
if key_was_pressed(' ') or mouse_was_pressed('right'):
    self.boostx = xdist*13
    self.boosty = ydist*13

# Deteriorate boost velocity
self.boostx, self.boosty = deter(self.boostx, 0.94), deter(self.boosty, 0.94)

# Final movement values in x and y
a, b = (self.xv+self.boostx), (self.yv+self.boosty)

# Keep track of position within the game map
self.gameX += a
self.gameY += b

p_deltaX = a
p_deltaY = b

# Distance from zero after move
xdist = self.x + p_deltaX
ydist = self.y + p_deltaY

# Move player and background, dividing by 1.1 to center player
# Number close to 1 results in slower centering movement
self.x = (self.x + p_deltaX)/1.1
self.y = (self.y + p_deltaY)/1.1
game.bg.x -= xdist - xdist/1.1
game.bg.y -= ydist - ydist/1.1
game.obj_loader.update_pos(xdist - xdist/1.1, ydist - ydist/1.1)

# Rotate in direction of movement
Dx, Dy = self.gameX-x0, self.gameY-y0
if not Dx and not Dy: Dx = 1
m = hyp(Dx, Dy)
Dy = Dy/m

if m > 1:
    a = get_angle(Dy) - 90
    self.angle = a if Dx > 0 else -a







# Empty lines because I don't like it when code 
# is at the bottom of the screen"
}
},
{"Background":{
"type":"object script","start":"#Background start

self.sprite = sprite('waterBG.png')","loop":"#Background loop

"
}
},
{"objloader":{
"type":"object script","start":"# Reference to ObjLoader class that created the instance
self.parent = None","loop":"#ObjLoader loop

self.parent.do_loop()

# p = game.p
# pX, pY = p.gameX, p.gameY

# for obj in self.objs:
#     oX, oY = obj.gameX, obj.gameY
#     dist = getdist(pX, pY, oX, oY)
#     if dist < self.load_dist:
#         obj.x = pX-oX
#         obj.y = pY-oY
#         obj.visible = True
#     else:
#         obj.visible = False"
}
},
{"Whale":{
"type":"object script","start":"#Block start

self.sprite = sprite('whale.png')
self.gameX, self.gameY = 1500, -420
self.visible = False

self.frames = 0","loop":"#Block loop
if self.visible:
    d = self.frames % 100
    
    if 0 <= d < 50:
        self.y += 0.5
    if 50 <= d < 100:
        self.y -= 0.5
    
    self.frames += 1"
}
}
],
"room":[

],
"texture":[
{"octopus.png":{
"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615621603.octopus.png"
}
},
{"waterBG.png":{
"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615667719.waterBG.png"
}
},
{"whale.png":{
"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615757396.whale.png"
}
}
],
"sound":[

],
"function":[
{"imports.py":{
"type":"function script","head":"#File for imports to run before everything
import math
from collections import deque
"
}
},
{"quickfuncs.py":{
"type":"function script","head":"#A collection of helper functions/enums.


def hyp(s, c) -> int:
    \"\"\"Return hypotenuse of right angle triangle.\"\"\"
    return math.sqrt((s**2)+(c**2))

def get_angle(y) -> float:
    \"\"\"Return angle of right angle triangle.
    
    Assumes hypotenuse is 1
    \"\"\"
    return math.degrees(math.asin(y))

def deter(val, k) -> int:
    \"\"\"Helper function that allows for movement deterioration
    while preventing rounding errors.\"\"\"
    if abs(val) <= 0.1: return 0
    return round(val*k, 3)

def get_dist(x1, y1, x2, y2):
    \"\"\"Return the distance between two points.\"\"\"
    return math.sqrt((x2-x1)**2 + (y2-y1)**2)"
}
},
{"ObjLoader.py":{
"type":"function script","head":"class ObjLoader:
    def __init__(self, load_dist=2000, *objs):
        self.objs = list(objs)
        self.load_dist = 2000
        self.inst = objloader()
        self.inst.visible = False
        self.inst.parent = self
    
    def do_loop(self):
        p = game.p
        pX, pY = p.gameX, p.gameY

        for obj in self.objs:
            oX, oY = obj.gameX, obj.gameY
            dist = get_dist(pX, pY, oX, oY)

            if dist < self.load_dist:
                if not obj.visible:
                    obj.x = oX - pX
                    obj.y = oY - pY
                    obj.visible = True
            
            else:
                obj.visible = False

    def update_pos(self, Dx, Dy):
        \"\"\"Move all visible objects\"\"\"
        for obj in self.objs:
            if obj.visible:
                obj.x -= Dx
                obj.y -= Dy"
}
}
]
}
}