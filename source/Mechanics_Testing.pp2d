{"assets":{"script":[{"Game":{"type":"game script","start":"self.bg = Background()\r\nself.p = Player()","loop":""}},{"Player":{"type":"object script","start":"#initialise pos, sprite\nself.gameX = 0\nself.gameY = 0\n\nself.x = 0\nself.y = 0\nself.sprite = new_sprite(\"octopus.png\")\nself.scaleX = 0.7\nself.scaleY = 0.7\n\n#velocity values\nself.xv = 0\nself.yv = 0\nself.boostx, self.boosty = 0, 0","loop":"xdist = mouse_x()-self.x\nydist = mouse_y()-self.y\nkeys = [key_is_pressed('arrowRight'), key_is_pressed('arrowLeft'), \n        key_is_pressed('arrowUp'), key_is_pressed('arrowDown')]\nx0, y0 = self.gameX, self.gameY\n\n# Prevent 0 trig errors\nif not xdist and not ydist:\n    xdist = 1\n\n# Get hypotenuse and adjust x & y for hyp of length 1\nmagn = hyp(xdist, ydist)\nxdist, ydist = xdist/magn, ydist/magn\n\ndef do_move():\n    # Increase velocity\n    self.xv += (xdist*0.9)\n    self.yv += (ydist*0.9)\n    \n    # Get total velocity magnetude\n    Vhyp = hyp(self.xv, self.yv)\n    \n    # Correct velocity speed\n    if Vhyp > 6.5: # 6.5\n        self.xv = (self.xv/Vhyp)*6.5\n        self.yv = (self.yv/Vhyp)*6.5\n\n# Move unless mouse is right on top of player\nif mouse_is_pressed('left') and not magn < 25:\n    do_move()\n\n# Allow for arrow-key movement\nelif any(keys):\n    xdist=ydist=0\n    if keys[0]: xdist = 1\n    if keys[1]: xdist = -1\n    if keys[2]: ydist = 1\n    if keys[3]: ydist = -1\n    magn = hyp(xdist, ydist)\n    xdist, ydist = xdist/magn, ydist/magn\n\n    do_move()\n\nelse:\n    # \"Water resistance\" deteriorate velocity\n    self.xv = deter(self.xv, 0.95)\n    self.yv = deter(self.yv, 0.95)\n    \n# Dash\nif key_was_pressed(' ') or mouse_was_pressed('right'):\n    self.boostx = xdist*13\n    self.boosty = ydist*13\n\n# Deteriorate boost velocity\nself.boostx, self.boosty = deter(self.boostx, 0.94), deter(self.boosty, 0.94)\n\n# Final movement values in x and y\na, b = (self.xv+self.boostx), (self.yv+self.boosty)\n\n# Keep track of position within the game map\nself.gameX += a\nself.gameY += b\n\np_deltaX = a\np_deltaY = b\n\n# Distance from zero after move\nxdist = self.x + p_deltaX\nydist = self.y + p_deltaY\n\n# Move player and background, dividing by 1.1 to center player\n# Number close to 1 results in slower centering movement\nself.x = (self.x + p_deltaX)/1.1\nself.y = (self.y + p_deltaY)/1.1\ngame.bg.x -= xdist - xdist/1.1\ngame.bg.y -= ydist - ydist/1.1\n\n# Rotate in direction of movement\nDx, Dy = self.gameX-x0, self.gameY-y0\nif not Dx and not Dy: Dx = 1\nm = hyp(Dx, Dy)\nDy = Dy/m\n\nif m > 1:\n    a = get_angle(Dy) - 90\n    self.angle = a if Dx > 0 else -a\n\n\n\n\n\n\n\n\n\n# Empty lines because I don't like it when code \n# is at the bottom of the screen"}},{"Background":{"type":"object script","start":"#Background start\n\nself.sprite = sprite('waterBG.png')","loop":"#Background loop\n\n"}}],"room":[],"texture":[{"octopus.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615621603.octopus.png"}},{"waterBG.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615667719.waterBG.png"}}],"sound":[],"function":[{"imports.py":{"type":"function script","head":"#File for imports to run before everything\nimport math\nfrom collections import deque\n"}},{"quickfuncs.py":{"type":"function script","head":"#A collection of helper functions/enums.\n\ndegconv = math.pi/180;\n\n\ndef hyp(s, c) -> int:\n    \"\"\"Return hypotenuse of right angle triangle.\"\"\"\n    return math.sqrt((s**2)+(c**2))\n\ndef get_angle(y) -> float:\n    \"\"\"Return angle of right angle triangle.\n    \n    Assumes hypotenuse is 1\n    \"\"\"\n    return math.degrees(math.asin(y))\n\ndef deter(val, k) -> int:\n    \"\"\"Helper function that allows for movement deterioration\n    while preventing rounding errors.\"\"\"\n    if abs(val) <= 0.1: return 0\n    return round(val*k, 3)"}}]}}