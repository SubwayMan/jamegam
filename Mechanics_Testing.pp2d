{"assets":{"script":[{"Game":{"type":"game script","start":"self.bg = Background()\r\nself.p = Player()","loop":""}},{"Player":{"type":"object script","start":"#initialise pos, sprite\nself.gameX = 0\nself.gameY = 0\n\nself.x = 0\nself.y = 0\nself.sprite = new_sprite(\"octopus.png\")\n\n#velocity values\nself.xv = 0\nself.yv = 0\nself.boostx, self.boosty = 0, 0\n\n# Radius of movement bound circle\nself.circleR = 80\n\nself.framecount = 0","loop":"xdist = mouse_x()-self.x\nydist = mouse_y()-self.y\n\n# Prevent 0 trig errors\nif not xdist and not ydist:\n    xdist = 1\n\n# Get hypotenuse and adjust x & y for hyp of length 1\nmagn = hyp(xdist, ydist)\nxdist, ydist = xdist/magn, ydist/magn\n\n# Rotate\na = get_angle(ydist) - 90\nself.angle = a if xdist > 0 else -a\n\n# Move\nif mouse_is_pressed('left'):\n    #increase velocity\n    self.xv += (xdist*0.9)\n    self.yv += (ydist*0.9)\n    #get total velocity magnetude\n    Vhyp = hyp(self.xv, self.yv)\n    #correct velocity speed\n    if Vhyp > 6.5: # 6.5\n        self.xv = (self.xv/Vhyp)*6.5\n        self.yv = (self.yv/Vhyp)*6.5\n\nelse:\n    #water deteriorate velocity\n    self.xv = deter(self.xv, 0.95)\n    self.yv = deter(self.yv, 0.95)\n    \n#dash\nif key_was_pressed(' ') or mouse_was_pressed('right'):\n    self.boostx = xdist*13\n    self.boosty = ydist*13\n\n#deteriorate boost velocity\nself.boostx, self.boosty = deter(self.boostx, 0.94), deter(self.boosty, 0.94)\n\n# Final movement values in x and y\na, b = (self.xv+self.boostx), (self.yv+self.boosty)\n\n# Distance from (0, 0)\ndist0 = hyp(self.x, self.y)\n\n# Keep track of position within the game map\nself.gameX += a\nself.gameY += b\nprint(self.gameX, self.gameY)\n\np_deltaX = p_deltaY = bg_deltaX = bg_deltaY = 0\n\nif dist0 >= self.circleR:\n    bg_deltaX -= a\n    bg_deltaY -= b\n    #game.bg.x -= a\n    #game.bg.y -= b\nelse:\n    p_deltaX += a\n    p_deltaY += b\n    #self.x += a\n    #self.y += b\n\nxdist = self.x + p_deltaX\nydist = self.y + p_deltaY\nself.x = (self.x + p_deltaX)/1.07\nself.y = (self.y + p_deltaY)/1.07\ngame.bg.x = (game.bg.x + bg_deltaX) - (xdist - xdist/1.07)\ngame.bg.y = (game.bg.y + bg_deltaY) - (ydist - ydist/1.07)"}},{"Background":{"type":"object script","start":"#Background start\n\nself.sprite = sprite('waterBG.png')","loop":"#Background loop\n\n"}}],"room":[],"texture":[{"octopus.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615621603.octopus.png"}},{"waterBG.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.225782.1615667719.waterBG.png"}}],"sound":[],"function":[{"imports.py":{"type":"function script","head":"#File for imports to run before everything\nimport math\nfrom collections import deque\n"}},{"quickfuncs.py":{"type":"function script","head":"#A collection of helper functions/enums.\n\ndegconv = math.pi/180;\n\n\ndef hyp(s, c) -> int:\n    \"\"\"Return hypotenuse of right angle triangle.\"\"\"\n    return math.sqrt((s**2)+(c**2))\n\ndef get_angle(y) -> float:\n    \"\"\"Return angle of right angle triangle.\n    \n    Assumes hypotenuse is 1\n    \"\"\"\n    return math.degrees(math.asin(y))\n\ndef deter(val, k) -> int:\n    \"\"\"Helper function that allows for movement deterioration\n    while preventing rounding errors.\"\"\"\n    if abs(val) <= 0.1: return 0\n    return round(val*k, 3)"}},{"ns_classes.py":{"type":"function script","head":"#non-significant classes\n\nclass segm():\n\n    def __init__(self, x, y, scl, delay):\n\n        self.inst = Pfollower()\n        self.inst.x = x\n        self.inst.y = y\n        self.inst.scaleX = scl\n        self.inst.scaleY = scl\n        self.inst.wrapper = self\n        self.delay = delay\n        self.updateq = []\n        self.jobn = 0\n\n    def update(self, nx, ny):\n        self.updateq.append((nx, ny))\n        self.jobn += 1\n        if self.jobn > self.delay:\n            self.jobn -= 1\n            a, b = self.updateq.pop(0)\n            self.inst.x = a\n            self.inst.y = b\n\n    "}}]}}